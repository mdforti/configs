let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <silent> <F9> :call BASH_Debugger():redraw!
nnoremap <buffer> "" ciW""P
nnoremap <buffer> '' ciW''P
map <buffer> <silent> ,ro :call BASH_Toggle_Gvim_Xterm()
map <buffer> <silent> ,rs :call BASH_Settings()
vmap <buffer> <silent> ,rh :call BASH_Hardcopy("v")
nmap <buffer> <silent> ,rh :call BASH_Hardcopy("n")
omap <buffer> <silent> ,rh :call BASH_Hardcopy("n")
vmap <buffer> <silent> ,rr :call BASH_Run("v")
map <buffer> <silent> ,rd :call BASH_Debugger():redraw!
map <buffer> <silent> ,rc :call BASH_SyntaxCheck()
map <buffer> <silent> ,ra :call BASH_CmdLineArguments()
nmap <buffer> <silent> ,rr :call BASH_Run("n")
omap <buffer> <silent> ,rr :call BASH_Run("n")
map <buffer> <silent> ,re :call BASH_MakeScriptExecutable()
noremap <buffer> <silent> ,ne :call BASH_CodeSnippets("e")
vnoremap <buffer> <silent> ,nw :call BASH_CodeSnippets("wv")
nnoremap <buffer> <silent> ,nw :call BASH_CodeSnippets("w")
onoremap <buffer> <silent> ,nw :call BASH_CodeSnippets("w")
noremap <buffer> <silent> ,nr :call BASH_CodeSnippets("r")
vnoremap <buffer> <silent> ,sp sprintf "%s\n"2hP
nnoremap <buffer> <silent> ,sp ^iprintf "%s\n"2hi
onoremap <buffer> <silent> ,sp ^iprintf "%s\n"2hi
vnoremap <buffer> <silent> ,se secho -e "\n"2hP
nnoremap <buffer> <silent> ,se ^iecho -e "\n"2hi
onoremap <buffer> <silent> ,se ^iecho -e "\n"2hi
vnoremap <buffer> <silent> ,sfu :call BASH_CodeFunction("v")
nnoremap <buffer> <silent> ,sfu :call BASH_CodeFunction("a")O
onoremap <buffer> <silent> ,sfu :call BASH_CodeFunction("a")O
vnoremap <buffer> <silent> ,sw :call BASH_FlowControl( "while _ ",     "do",   "done",     "v" )
nnoremap <buffer> <silent> ,sw :call BASH_FlowControl( "while _ ",     "do",   "done",     "a" )i
onoremap <buffer> <silent> ,sw :call BASH_FlowControl( "while _ ",     "do",   "done",     "a" )i
vnoremap <buffer> <silent> ,st :call BASH_FlowControl( "until _ ",     "do",   "done",     "v" )
nnoremap <buffer> <silent> ,st :call BASH_FlowControl( "until _ ",     "do",   "done",     "a" )i
onoremap <buffer> <silent> ,st :call BASH_FlowControl( "until _ ",     "do",   "done",     "a" )i
vnoremap <buffer> <silent> ,ss :call BASH_FlowControl( "select _ in ", "do",   "done",     "v" )
nnoremap <buffer> <silent> ,ss :call BASH_FlowControl( "select _ in ", "do",   "done",     "a" )i
onoremap <buffer> <silent> ,ss :call BASH_FlowControl( "select _ in ", "do",   "done",     "a" )i
vnoremap <buffer> <silent> ,sie :call BASH_FlowControl( "if _ ",        "then", "else\nfi", "v" )
nnoremap <buffer> <silent> ,sie :call BASH_FlowControl( "if _ ",        "then", "else\nfi", "a" )i
onoremap <buffer> <silent> ,sie :call BASH_FlowControl( "if _ ",        "then", "else\nfi", "a" )i
vnoremap <buffer> <silent> ,si :call BASH_FlowControl( "if _ ",        "then", "fi",       "v" )
nnoremap <buffer> <silent> ,si :call BASH_FlowControl( "if _ ",        "then", "fi",       "a" )i
onoremap <buffer> <silent> ,si :call BASH_FlowControl( "if _ ",        "then", "fi",       "a" )i
vnoremap <buffer> <silent> ,sfo :call BASH_FlowControl( "for (( COUNTER=0; COUNTER<_0; COUNTER++ ))",    "do",   "done",     "v" )
nnoremap <buffer> <silent> ,sfo :call BASH_FlowControl( "for (( COUNTER=0; COUNTER<_0; COUNTER++ ))",    "do",   "done",     "a" )
onoremap <buffer> <silent> ,sfo :call BASH_FlowControl( "for (( COUNTER=0; COUNTER<_0; COUNTER++ ))",    "do",   "done",     "a" )
vnoremap <buffer> <silent> ,sf :call BASH_FlowControl( "for _ in ",    "do",   "done",     "v" )
nnoremap <buffer> <silent> ,sf :call BASH_FlowControl( "for _ in ",    "do",   "done",     "a" )i
onoremap <buffer> <silent> ,sf :call BASH_FlowControl( "for _ in ",    "do",   "done",     "a" )i
noremap <buffer> <silent> ,sl :call BASH_FlowControl( "elif _ ",      "then",   "",       "a" )i
noremap <buffer> <silent> ,sc ocase  in);;);;*);;esac    # --- end of case ---11kf a
noremap <buffer> <silent> ,cv :call BASH_CommentVimModeline()
noremap <buffer> <silent> ,cr 0:s/^\s*echo\s\+\"// | s/\s*\"\s*$// | :normal ==j'
noremap <buffer> <silent> ,ce ^iecho "<End>"j'
noremap <buffer> <silent> ,ckn $:call BASH_CommentClassified("")        kJf:a
noremap <buffer> <silent> ,ckw $:call BASH_CommentClassified("WARNING") kJA
noremap <buffer> <silent> ,ckr $:call BASH_CommentClassified("TRICKY")  kJA
noremap <buffer> <silent> ,ckt $:call BASH_CommentClassified("TODO")    kJA
noremap <buffer> <silent> ,ckb $:call BASH_CommentClassified("BUG")     kJA
noremap <buffer> <silent> ,ct a=BASH_InsertDateAndTime('dt')
noremap <buffer> <silent> ,cd a=BASH_InsertDateAndTime('d')
vnoremap <buffer> <silent> ,cc :'<,'>call BASH_CommentToggle()j
nnoremap <buffer> <silent> ,cc :call BASH_CommentToggle()j
onoremap <buffer> <silent> ,cc :call BASH_CommentToggle()j
noremap <buffer> <silent> ,ch :call BASH_CommentTemplates('header')
noremap <buffer> <silent> ,cfu :call BASH_CommentTemplates('function')
noremap <buffer> <silent> ,cfr :call BASH_CommentTemplates('frame')
noremap <buffer> <silent> ,cs :call BASH_GetLineEndCommCol()
vnoremap <buffer> <silent> ,cj :call BASH_AdjustLineEndComm("v")
nnoremap <buffer> <silent> ,cj :call BASH_AdjustLineEndComm("a")
onoremap <buffer> <silent> ,cj :call BASH_AdjustLineEndComm("a")
vnoremap <buffer> <silent> ,cl :call BASH_MultiLineEndComments()A
nnoremap <buffer> <silent> ,cl :call BASH_LineEndComment()A
onoremap <buffer> <silent> ,cl :call BASH_LineEndComment()A
noremap <buffer> <silent> ,hp :call BASH_HelpBASHsupport()
noremap <buffer> <silent> ,hm :call BASH_help('m')
noremap <buffer> <silent> ,hh :call BASH_help('h')
map <buffer> <silent> <F9> :call BASH_Debugger():redraw!
imap <buffer> <silent> ,ro :call BASH_Toggle_Gvim_Xterm()
imap <buffer> <silent> ,rs :call BASH_Settings()
imap <buffer> <silent> ,rh :call BASH_Hardcopy("n")
imap <buffer> <silent> ,rd :call BASH_Debugger():redraw!
imap <buffer> <silent> ,rc :call BASH_SyntaxCheck()
imap <buffer> <silent> ,ra :call BASH_CmdLineArguments()
imap <buffer> <silent> ,rr :call BASH_Run("n")
imap <buffer> <silent> ,re :call BASH_MakeScriptExecutable()
inoremap <buffer> <silent> ,sp printf "%s\n"2hi
inoremap <buffer> <silent> ,se echo -e "\n"2hi
inoremap <buffer> <silent> ,sfu :call BASH_CodeFunction("a")O
inoremap <buffer> <silent> ,sw :call BASH_FlowControl( "while _ ",     "do",   "done",     "a" )i
inoremap <buffer> <silent> ,st :call BASH_FlowControl( "until _ ",     "do",   "done",     "a" )i
inoremap <buffer> <silent> ,ss :call BASH_FlowControl( "select _ in ", "do",   "done",     "a" )i
inoremap <buffer> <silent> ,sie :call BASH_FlowControl( "if _ ",        "then", "else\nfi", "a" )i
inoremap <buffer> <silent> ,si :call BASH_FlowControl( "if _ ",        "then", "fi",       "a" )i
inoremap <buffer> <silent> ,sfo :call BASH_FlowControl( "for (( COUNTER=0; COUNTER<_0; COUNTER++ ))",    "do",   "done",     "a" )
inoremap <buffer> <silent> ,sf :call BASH_FlowControl( "for _ in ",    "do",   "done",     "a" )i
inoremap <buffer> <silent> ,sl :call BASH_FlowControl( "elif _ ",      "then",   "",       "a" )i
inoremap <buffer> <silent> ,sc ocase  in);;);;*);;esac    # --- end of case ---11kf a
inoremap <buffer> <silent> ,cv :call BASH_CommentVimModeline()
inoremap <buffer> <silent> ,cr 0:s/^\s*echo\s\+\"// | s/\s*\"\s*$// | :normal ==j'
inoremap <buffer> <silent> ,ce ^iecho "<End>"j'
inoremap <buffer> <silent> ,ckn $:call BASH_CommentClassified("")        kJf:a
inoremap <buffer> <silent> ,ckw $:call BASH_CommentClassified("WARNING") kJA
inoremap <buffer> <silent> ,ckr $:call BASH_CommentClassified("TRICKY")  kJA
inoremap <buffer> <silent> ,ckt $:call BASH_CommentClassified("TODO")    kJA
inoremap <buffer> <silent> ,ckb $:call BASH_CommentClassified("BUG")     kJA
inoremap <buffer> <silent> ,ct =BASH_InsertDateAndTime('dt')
inoremap <buffer> <silent> ,cd =BASH_InsertDateAndTime('d')
inoremap <buffer> <silent> ,cc :call BASH_CommentToggle()j
inoremap <buffer> <silent> ,ch :call BASH_CommentTemplates('header')
inoremap <buffer> <silent> ,cfu :call BASH_CommentTemplates('function')
inoremap <buffer> <silent> ,cfr :call BASH_CommentTemplates('frame')
inoremap <buffer> <silent> ,cs :call BASH_GetLineEndCommCol()
inoremap <buffer> <silent> ,cj :call BASH_AdjustLineEndComm("a")
inoremap <buffer> <silent> ,cl :call BASH_LineEndComment()A
inoremap <buffer> <silent> ,hp :call BASH_HelpBASHsupport()
inoremap <buffer> <silent> ,hm :call BASH_help('m')
inoremap <buffer> <silent> ,hh :call BASH_help('h')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal cursorlineopt=both
setlocal define=
setlocal dictionary=~/.vim/bash-support/wordlists/bash.list
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'sh'
setlocal filetype=sh
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=syntax
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetShIndent()
setlocal indentkeys=0{,0},0),0],!^F,o,O,e,0=then,0=do,0=else,0=elif,0=fi,0=esac,0=done,0=end,),0=;;,0=;&,0=fin,0=fil,0=fip,0=fir,0=fix
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal scrolloff=-1
setlocal shiftwidth=4
setlocal noshortname
setlocal showbreak=
setlocal sidescrolloff=-1
setlocal signcolumn=auto
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'sh'
setlocal syntax=sh
endif
setlocal tabstop=8
setlocal tagcase=
setlocal tagfunc=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal wincolor=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 45 - ((22 * winheight(0) + 11) / 23)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
45
normal! 0
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
